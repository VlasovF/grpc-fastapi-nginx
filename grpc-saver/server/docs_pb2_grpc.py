# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import docs_pb2 as docs__pb2


class DocsSaverStub(object):
    """The documents saving service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveDocument = channel.unary_unary(
                '/docs.DocsSaver/SaveDocument',
                request_serializer=docs__pb2.SaveDocumentRequest.SerializeToString,
                response_deserializer=docs__pb2.SaveDocumentReply.FromString,
                )
        self.SaveDocuments = channel.stream_unary(
                '/docs.DocsSaver/SaveDocuments',
                request_serializer=docs__pb2.SaveDocumentRequest.SerializeToString,
                response_deserializer=docs__pb2.SaveDocumentReply.FromString,
                )


class DocsSaverServicer(object):
    """The documents saving service definition.
    """

    def SaveDocument(self, request, context):
        """Save one document
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveDocuments(self, request_iterator, context):
        """Save multiple documents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DocsSaverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveDocument,
                    request_deserializer=docs__pb2.SaveDocumentRequest.FromString,
                    response_serializer=docs__pb2.SaveDocumentReply.SerializeToString,
            ),
            'SaveDocuments': grpc.stream_unary_rpc_method_handler(
                    servicer.SaveDocuments,
                    request_deserializer=docs__pb2.SaveDocumentRequest.FromString,
                    response_serializer=docs__pb2.SaveDocumentReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'docs.DocsSaver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DocsSaver(object):
    """The documents saving service definition.
    """

    @staticmethod
    def SaveDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/docs.DocsSaver/SaveDocument',
            docs__pb2.SaveDocumentRequest.SerializeToString,
            docs__pb2.SaveDocumentReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveDocuments(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/docs.DocsSaver/SaveDocuments',
            docs__pb2.SaveDocumentRequest.SerializeToString,
            docs__pb2.SaveDocumentReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
